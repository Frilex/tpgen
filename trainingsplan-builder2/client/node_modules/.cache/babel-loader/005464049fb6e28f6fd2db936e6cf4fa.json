{"ast":null,"code":"export function createNewBlock(block, instanceId) {\n  let newOptions = {};\n  if (['aufwaermen', 'gehpause', 'trabpause', 'abkuehlung'].includes(block.id)) {\n    newOptions = {\n      selectedUnit: \"Distanz\",\n      value: '',\n      unitOptions: [\"Distanz\", \"Zeit\"],\n      notiz: ''\n    };\n  } else if (block.id === 'tempolauf') {\n    newOptions = {\n      selectedDropdown: block.options.dropdown[0],\n      selectedUnit: \"Distanz\",\n      value: '',\n      dropdown: block.options.dropdown,\n      unitOptions: [\"Distanz\", \"Zeit\"],\n      notiz: ''\n    };\n  } else if (block.id === 'dauerlauf') {\n    newOptions = {\n      selectedDropdown: block.options.dropdown[0],\n      selectedUnit: \"Distanz\",\n      value: '',\n      dropdown: block.options.dropdown,\n      unitOptions: [\"Distanz\", \"Zeit\"],\n      notiz: ''\n    };\n  } else if (block.id === 'wiederholung') {\n    newOptions = {\n      repetitions: block.options.repetitions,\n      notiz: ''\n    };\n  }\n  return {\n    ...block,\n    instanceId,\n    options: newOptions,\n    ...(block.id === 'wiederholung' ? {\n      children: []\n    } : {})\n  };\n}\nexport function addBlockToTree(blocks, parentId, newBlock) {\n  if (parentId === null) {\n    return [...blocks, newBlock];\n  }\n  return blocks.map(b => {\n    if (b.instanceId === parentId && b.id === 'wiederholung') {\n      return {\n        ...b,\n        children: [...(b.children || []), newBlock]\n      };\n    } else if (b.children) {\n      return {\n        ...b,\n        children: addBlockToTree(b.children, parentId, newBlock)\n      };\n    }\n    return b;\n  });\n}\nexport function deleteBlockFromTree(blocks, instanceId) {\n  return blocks.filter(b => b.instanceId !== instanceId).map(b => {\n    if (b.children) {\n      return {\n        ...b,\n        children: deleteBlockFromTree(b.children, instanceId)\n      };\n    }\n    return b;\n  });\n}\nexport function moveBlockInArray(arr, instanceId, direction) {\n  const index = arr.findIndex(b => b.instanceId === instanceId);\n  if (index === -1) return arr;\n  const newIndex = index + direction;\n  if (newIndex < 0 || newIndex >= arr.length) return arr;\n  const newArr = [...arr];\n  [newArr[index], newArr[newIndex]] = [newArr[newIndex], newArr[index]];\n  return newArr;\n}\nexport function moveBlockInTree(blocks, instanceId, direction) {\n  const index = blocks.findIndex(b => b.instanceId === instanceId);\n  if (index !== -1) {\n    return moveBlockInArray(blocks, instanceId, direction);\n  }\n  return blocks.map(b => {\n    if (b.children) {\n      return {\n        ...b,\n        children: moveBlockInTree(b.children, instanceId, direction)\n      };\n    }\n    return b;\n  });\n}\nexport function updateBlockOptionsInTree(blocks, instanceId, newOptions) {\n  return blocks.map(b => {\n    if (b.instanceId === instanceId) {\n      return {\n        ...b,\n        options: {\n          ...b.options,\n          ...newOptions\n        }\n      };\n    }\n    if (b.children) {\n      return {\n        ...b,\n        children: updateBlockOptionsInTree(b.children, instanceId, newOptions)\n      };\n    }\n    return b;\n  });\n}\nexport function computeSums(blocks) {\n  let distance = 0,\n    time = 0;\n  blocks.forEach(block => {\n    if (block.id === 'wiederholung') {\n      const reps = block.options.repetitions || 1;\n      const childSums = computeSums(block.children || []);\n      distance += childSums.distance * reps;\n      time += childSums.time * reps;\n    } else {\n      const val = parseFloat(block.options.value) || 0;\n      if (block.options.selectedUnit === \"Distanz\") {\n        distance += val;\n      } else if (block.options.selectedUnit === \"Zeit\") {\n        time += val;\n      }\n    }\n  });\n  return {\n    distance,\n    time\n  };\n}","map":{"version":3,"names":["createNewBlock","block","instanceId","newOptions","includes","id","selectedUnit","value","unitOptions","notiz","selectedDropdown","options","dropdown","repetitions","children","addBlockToTree","blocks","parentId","newBlock","map","b","deleteBlockFromTree","filter","moveBlockInArray","arr","direction","index","findIndex","newIndex","length","newArr","moveBlockInTree","updateBlockOptionsInTree","computeSums","distance","time","forEach","reps","childSums","val","parseFloat"],"sources":["C:/Users/Alex/Documents/tpgen/trainingsplan-builder2/client/src/utils/blockUtils.jsx"],"sourcesContent":["export function createNewBlock(block, instanceId) {\r\n    let newOptions = {};\r\n    if (['aufwaermen', 'gehpause', 'trabpause', 'abkuehlung'].includes(block.id)) {\r\n      newOptions = { \r\n        selectedUnit: \"Distanz\",\r\n        value: '',\r\n        unitOptions: [\"Distanz\", \"Zeit\"],\r\n        notiz: ''\r\n      };\r\n    } else if (block.id === 'tempolauf') {\r\n      newOptions = { \r\n        selectedDropdown: block.options.dropdown[0],\r\n        selectedUnit: \"Distanz\",\r\n        value: '',\r\n        dropdown: block.options.dropdown,\r\n        unitOptions: [\"Distanz\", \"Zeit\"],\r\n        notiz: ''\r\n      };\r\n    } else if (block.id === 'dauerlauf') {\r\n      newOptions = { \r\n        selectedDropdown: block.options.dropdown[0],\r\n        selectedUnit: \"Distanz\",\r\n        value: '',\r\n        dropdown: block.options.dropdown,\r\n        unitOptions: [\"Distanz\", \"Zeit\"],\r\n        notiz: ''\r\n      };\r\n    } else if (block.id === 'wiederholung') {\r\n      newOptions = { \r\n        repetitions: block.options.repetitions,\r\n        notiz: ''\r\n      };\r\n    }\r\n    return {\r\n      ...block,\r\n      instanceId,\r\n      options: newOptions,\r\n      ...(block.id === 'wiederholung' ? { children: [] } : {})\r\n    };\r\n  }\r\n  \r\n  export function addBlockToTree(blocks, parentId, newBlock) {\r\n    if (parentId === null) {\r\n      return [...blocks, newBlock];\r\n    }\r\n    return blocks.map(b => {\r\n      if (b.instanceId === parentId && b.id === 'wiederholung') {\r\n        return {\r\n          ...b,\r\n          children: [...(b.children || []), newBlock]\r\n        };\r\n      } else if (b.children) {\r\n        return {\r\n          ...b,\r\n          children: addBlockToTree(b.children, parentId, newBlock)\r\n        };\r\n      }\r\n      return b;\r\n    });\r\n  }\r\n  \r\n  export function deleteBlockFromTree(blocks, instanceId) {\r\n    return blocks.filter(b => b.instanceId !== instanceId).map(b => {\r\n      if (b.children) {\r\n        return { ...b, children: deleteBlockFromTree(b.children, instanceId) };\r\n      }\r\n      return b;\r\n    });\r\n  }\r\n  \r\n  export function moveBlockInArray(arr, instanceId, direction) {\r\n    const index = arr.findIndex(b => b.instanceId === instanceId);\r\n    if (index === -1) return arr;\r\n    const newIndex = index + direction;\r\n    if (newIndex < 0 || newIndex >= arr.length) return arr;\r\n    const newArr = [...arr];\r\n    [newArr[index], newArr[newIndex]] = [newArr[newIndex], newArr[index]];\r\n    return newArr;\r\n  }\r\n  \r\n  export function moveBlockInTree(blocks, instanceId, direction) {\r\n    const index = blocks.findIndex(b => b.instanceId === instanceId);\r\n    if (index !== -1) {\r\n      return moveBlockInArray(blocks, instanceId, direction);\r\n    }\r\n    return blocks.map(b => {\r\n      if (b.children) {\r\n        return { ...b, children: moveBlockInTree(b.children, instanceId, direction) };\r\n      }\r\n      return b;\r\n    });\r\n  }\r\n  \r\n  export function updateBlockOptionsInTree(blocks, instanceId, newOptions) {\r\n    return blocks.map(b => {\r\n      if (b.instanceId === instanceId) {\r\n        return { ...b, options: { ...b.options, ...newOptions } };\r\n      }\r\n      if (b.children) {\r\n        return { ...b, children: updateBlockOptionsInTree(b.children, instanceId, newOptions) };\r\n      }\r\n      return b;\r\n    });\r\n  }\r\n  \r\n  export function computeSums(blocks) {\r\n    let distance = 0, time = 0;\r\n    blocks.forEach(block => {\r\n      if (block.id === 'wiederholung') {\r\n        const reps = block.options.repetitions || 1;\r\n        const childSums = computeSums(block.children || []);\r\n        distance += childSums.distance * reps;\r\n        time += childSums.time * reps;\r\n      } else {\r\n        const val = parseFloat(block.options.value) || 0;\r\n        if (block.options.selectedUnit === \"Distanz\") {\r\n          distance += val;\r\n        } else if (block.options.selectedUnit === \"Zeit\") {\r\n          time += val;\r\n        }\r\n      }\r\n    });\r\n    return { distance, time };\r\n  }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}